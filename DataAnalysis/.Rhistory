library(NbClust)
clusters_01<-read.csv(
file="brew_add.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
clusters_01<-read.csv(
file="brew_add.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
View(clusters_01)
clusters_new<-read.csv(
file="brew_add.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
clusters_raw<-read.csv(
file="brewery_raw.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
View(clusters_raw)
brewery_numeric3<-read.csv(
file="brewery_numeric.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
#scaling
brewery_scale<-scale(brewery_numeric3[,c(4:9)],center=TRUE,scale=TRUE)
summary(brewery_scale)
brewery_numeric3[,c(4:9)]
#scaling
brewery_3comp<-brewery_numeric3[,c(4)+c(5)]
brewery_numeric3[,c(4)+c(5)]
#scaling
brewery_numeric3[,c(4)]
#scaling
brewery_numeric3[,c(4)]
brewery_numeric3
brewery_numeric3$style.ibuMin+brewery_numeric3$style.ibuMax
brewery_scale<-scale(brewery_numeric3[,c(4:9)],center=TRUE,scale=TRUE)
View(brewery_scale)
#scaling
IBU<-brewery_numeric3$style.ibuMin+brewery_numeric3$style.ibuMax
ABV<-brewery_numeric3$style.abvMin+brewery_numeric3$style.abvMax
SRM<-brewery_numeric3$style.srmMin+brewery_numeric3$style.srmMax
brewery_3comp<-data.frame(brewery_numeric3[,c(1:3)],IBU,ABV,SRM)
View(brewery_3comp)
View(brewery_numeric3)
#scaling
IBU<-(brewery_numeric3$style.ibuMin+brewery_numeric3$style.ibuMax)/2
ABV<-(brewery_numeric3$style.abvMin+brewery_numeric3$style.abvMax)/2
SRM<-(brewery_numeric3$style.srmMin+brewery_numeric3$style.srmMax)/2
brewery_3comp<-data.frame(brewery_numeric3[,c(1:3)],IBU,ABV,SRM)
View(brewery_3comp)
brewery_3comp<-data.frame(brewery_numeric3[,c(2:3)],IBU,ABV,SRM)
View(brewery_3comp)
View(clusters_new)
clusters_new[,c(2,9,10,11)]
View(clusters_new)
clusters_new[,c(1,2,9,10,11)]
cbind(brewery_3comp,clusters_new[,c(1,2,9,10,11)])
brewery_3comp
clusters_new[,c(1,2,9,10,11)]
names(clusters_new)
brewery_new<-clusters_new[,c(1,2,9,10,11)]
names(brewery_new)
names(brewery_new)<-names(brewery_3comp)
cbind(brewery_3comp,clusters_new[,c(1,2,9,10,11)])
brewery_new
cbind(brewery_3comp,brewery_new)
rbind(brewery_3comp,brewery_new)
rbind(brewery_3comp,clusters_new[,c(1,2,9,10,11))
rbind(brewery_3comp,clusters_new[,c(1,2,9,10,11)])
rbind(brewery_3comp,brewery_new)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
View(brewery_3comp)
clusters_new
View(brewery_3comp)
brewery_3comp<-data.frame(brewery_numeric3[,c(2:3)],IBU,ABV,SRM)
brewery_new<-clusters_new[,c(1,2,10,9,11)]
names(brewery_new)<-names(brewery_3comp)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
View(brewery_3comp)
View(brewery_3comp)
brewery_scale<-scale(brewery_3comp[,c(3:5)],center=TRUE,scale=TRUE)
summary(brewery_scale)
View(brewery_3comp)
brewery_numeric4<-cbind(brewery_numeric3[c(1:2)],brewery_scale)
brewery_numeric4<-cbind(brewery_3comp[c(1:2)],brewery_scale)
View(brewery_numeric4)
brewery_numeric4
clusters_out <- kmeans(x = brewery_numeric4[c(3:5)], centers = 10)
cluster_c10<-cbind(cluster_assignment=factor(clusters_out$cluster),brewery_numeric4)
qplot(style.ibuMin, style.abvMin, colour = cluster_assignment, data = cluster_c10)
qplot(IBU, ABV, colour = cluster_assignment, data = cluster_c10)
#validation
nc <- NbClust(brewery_numeric4, min.nc=2, max.nc=15, method="kmeans")
#validation
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=15, method="kmeans")
par(mfrow=c(1,1))
nc
#validation_1
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=15, method="kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(training.data)
wssplot(brewery_numeric4[c(3:5)])
clusters_out <- kmeans(x = brewery_numeric4[c(3:5)], centers = 12)
cluster_c12<-cbind(cluster_assignment=factor(clusters_out$cluster),brewery_numeric4)
qplot(IBU, ABV, colour = cluster_assignment, data = cluster_c10)
write.csv(
cluster_c12,              # 파일에 저장할 데이터 프레임 또는 행렬
file="cluster_c12.csv",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
cluster_c12
write.csv(
cluster_c12,              # 파일에 저장할 데이터 프레임 또는 행렬
file="cluster_c12.csv",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
library(readr)
dataset <- read_csv("cluster_b19_url.csv")
View(dataset)
View(dataset)
toJSON(dataset)
#install.packages("jsonlite)
library(jsonlite)
install.packages("jsonlite)
library(jsonlite)
#install.packages("NbClust")
library(NbClust)
#key : 서버에서 사용자마다 주는 key값
key <- "7bded40948c00c1e951a773b4b70c687"
#https://sandbox-api.brewerydb.com/v2/
base_url <- "http://api.brewerydb.com/v2"
key_preface <- "/?key="
get_beer <- function(id) {
fromJSON(paste0(base_url, "/beer/", id, "/", key_preface, key))
}
#모든 페이지의 값 불러오기
paginated_request <- function(trace_progress = TRUE) {
full_request <- NULL
first_page <- fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=",1))
number_of_pages <- ifelse(!(is.null(first_page$numberOfPages)), first_page$numberOfPages)
for (page in 1:number_of_pages) {
this_request <- fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=", page),flatten = TRUE)
full_request <- bind_rows(full_request, this_request$data)
}
bind_rows(full_request, this_request$data)
return(full_request)
}
brewery_raw<-paginated_request()
write.csv(
brewery_raw,              # 파일에 저장할 데이터 프레임 또는 행렬
file="brewery_raw.csv",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
#clustering
names(brewery_raw)
#id,ibu,ibv,srm
brewery_numeric<-brewery_raw[,c(1,2,36:41)]
#delete NA
brewery_numeric2<-brewery_numeric[complete.cases(brewery_numeric),]
write.csv(
brewery_numeric2,              # 파일에 저장할 데이터 프레임 또는 행렬
file="brewery_numeric.csv",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
brewery_numeric3<-read.csv(
file="brewery_numeric.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
IBU<-(brewery_numeric3$style.ibuMin+brewery_numeric3$style.ibuMax)/2
ABV<-(brewery_numeric3$style.abvMin+brewery_numeric3$style.abvMax)/2
SRM<-(brewery_numeric3$style.srmMin+brewery_numeric3$style.srmMax)/2
brewery_3comp<-data.frame(brewery_numeric3[,c(2:3)],IBU,ABV,SRM)
#new data
brewery_new<-clusters_new[,c(1,2,10,9,11)]
names(brewery_new)<-names(brewery_3comp)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
#scaling
brewery_scale<-scale(brewery_3comp[,c(3:5)],center=TRUE,scale=TRUE)
summary(brewery_scale)
brewery_numeric4<-cbind(brewery_3comp[c(1:2)],brewery_scale)
#validation_1
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=15, method="kmeans")
install.packages("jsonlite")
#install.packages("jsonlite")
library(jsonlite)
toJSON(dataset)
JSON<-toJSON(dataset)
data.frame(dataset)
data<-data.frame(dataset)
View(data)
data.class()<-data
data.class<-data
View(data.class)
View(data)
data$class<-data
View(data)
JSON<-toJSON(data)
view(JSON)
view(JSON)
get_beer <- function(id) {
fromJSON(paste0(base_url, "/beer/", id, "/", key_preface, key))
}
View(get_beer)
fromJSON(paste0(base_url, "/beer/", id, "/", key_preface, key))
#key : 서버에서 사용자마다 주는 key값
key <- "7bded40948c00c1e951a773b4b70c687"
#https://sandbox-api.brewerydb.com/v2/
base_url <- "http://api.brewerydb.com/v2"
key_preface <- "/?key="
fromJSON(paste0(base_url, "/beer/", id, "/", key_preface, key))
fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=", 1))
paste0(base_url, "/beers", key_preface, key, "&p=", 1)
fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=", 1))
#install.packages("jsonlite")
library(jsonlite)
fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=", 1))
fromJSON(paste0(base_url, "/beers", key_preface, key, "&p=", page),flatten = TRUE)
paste0(base_url, "/beers", key_preface, key, "&p=", page)
paste0(base_url, "/beers", key_preface, key, "&p=", 1)
fromJSON(http://api.brewerydb.com/v2/beers/?key=7bded40948c00c1e951a773b4b70c687&p=1)
fromJSON("http://api.brewerydb.com/v2/beers/?key=7bded40948c00c1e951a773b4b70c687&p=1")
install.packages('curl')
library(curl)
fromJSON("http://api.brewerydb.com/v2/beers/?key=7bded40948c00c1e951a773b4b70c687&p=1")
kk<-fromJSON("http://api.brewerydb.com/v2/beers/?key=7bded40948c00c1e951a773b4b70c687&p=1")
View(kk)
kk$data
kkk<-kk$data
View(kkk)
kkkk<-toJSON(kkk)
kkkk
View(dataset)
data[,2]
View(data)
View(data)
View(dataset)
data<-data.frame(dataset)
data[,3][]<-data[,c(1,2,4:9)]
a<-data[,3][data[,c(1,2,4:9)]]
data[,c(1,2,4:9)]
data_name<-data[,3]
data_name
data
View(data)
library(readr)
cluster_b19_url <- read_csv("cluster_b19_url.csv")
View(cluster_b19_url)
data<-cluster_b19_url
View(data)
data_name<-data[,3]
View(data_name)
data_sub<-data[,c(1,2,4:9)]
View(data_sub)
data_name[,data_sub]
data_name[data_sub]
data_name[data_sub[,]]
reshape(data, timevar = "MarketDate", idvar = "SymbolID",
direction = "wide",
v.names = c("Open", "Close", "High", "Low"))
reshape(data, name = "name", v.names = names(data_sub))
data_sub.names
v.names
View(data_name)
data_name$name<-data_sub
data_name$name<-data_sub
View(data_name)
View(data)
View(data_name)
toJSON(data_name)
names(data_name)
names(data_name$name)
names(data_name)
names(data_name)<-data[,3]
names(data_name)<-data[,3]
data_name
View(data_name)
data<-cluster_b19_url
data_name<-data[,3]
data_sub<-data[,c(1,2,4:9)]
View(data)
View(data_name)
data_name[name]
data_name[name]
data_name[names]
data_name
data_name$name
data_name$name<-data_sub
data_name$name
data_name
View(data_name)
data_name<-data[,3]
data_name
View(data_name)
rbind(data_name,data_sub)
rbind(data_name,data_sub)
cbind(data_name,data_sub)
asfd<-cbind(data_name,data_sub)
View(asfd)
toJSON(asfd)
jsondata<-cbind(data_name,data_sub)
write_json(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
write_json(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json",        # 데이터를 저장할 파일명
)
write_json(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
getwd(),
)
write_json(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
getwd()
)
write_json(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
toJSON(jsondata)
save(
toJSON(jsondata),              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
jsondata<-toJSON(jsondata)
save(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
jsondata<-cbind(data_name,data_sub)
save(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
write_json(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
write_json(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="../jsondata.json"
)
write_json(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="./jsondata.json"
)
jsondata<-toJSON(jsondata)
write_json(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.json"
)
jsondata<-cbind(data_name,data_sub)
write.csv(
jsondata,              # 파일에 저장할 데이터 프레임 또는 행렬
file="jsondata.csv",        # 데이터를 저장할 파일명
row.names=TRUE  # TRUE면 행 이름을 CSV 파일에 포함하여 저장한다.
)
paste0(base_url, "/beers", key_preface, key, "&p=",1)
brewery_numeric2<-read.csv(
file="brewery_numeric.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
brewery_numeric2<-brewery_numeric2[,c(2:12)]
brewery_numeric3<-brewery_numeric2
#validation_1
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=20, method="kmeans")
#default setting
#install.packages("ggplot2", repos="http://cran.nexr.com/")
library(ggplot2)
#install.packages("dplyr")
library(dplyr)
#install.packages("tidyr")
library(tidyr)
#install.packages("jsonlite)
library(jsonlite)
#install.packages("NbClust")
library(NbClust)
#validation_1
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=20, method="kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
View(asfd)
#scaling
brewery_scale<-scale(brewery_3comp[,c(2:4)],center=TRUE,scale=TRUE)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
brewery_new<-brewery_new[,c(2,10,9,11,12:14)]
#new data
brewery_new<-read.csv(
file="brew_add.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
brewery_new<-brewery_new[,c(2,10,9,11,12:14)]
names(brewery_new)<-names(brewery_3comp)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
brewery_3comp<-data.frame(brewery_numeric3[,c(2)],IBU,ABV,SRM,brewery_numeric3[,c(9:11)])
brewery_numeric2<-read.csv(
file="brewery_numeric.csv",          # 파일명
header=TRUE,  # 파일의 첫 행을 헤더로 처리할 것인지 여부
# 데이터에 결측치가 포함되어 있을 경우 R의 NA에 대응시킬 값을 지정한다.
# 기본값은 "NA"로, "NA"로 저장된 문자열들은 R의 NA로 저장된다.
na.strings="NA",
# 문자열을 팩터로 저장할지 또는 문자열로 저장할지 여부를 지정하는 데 사용한다. 별다른
# 설정을 하지 않았다면 기본값은 보통 TRUE다.
stringsAsFactors=default.stringsAsFactors()
)
brewery_numeric2<-brewery_numeric2[,c(2:12)]
brewery_numeric3<-brewery_numeric2
IBU<-(brewery_numeric3$style.ibuMin+brewery_numeric3$style.ibuMax)/2
ABV<-(brewery_numeric3$style.abvMin+brewery_numeric3$style.abvMax)/2
SRM<-(brewery_numeric3$style.srmMin+brewery_numeric3$style.srmMax)/2
brewery_3comp<-data.frame(brewery_numeric3[,c(2)],IBU,ABV,SRM,brewery_numeric3[,c(9:11)])
brewery_3comp<-rbind(brewery_3comp,brewery_new)
names(brewery_new)<-names(brewery_3comp)
brewery_3comp<-rbind(brewery_3comp,brewery_new)
#validation_1
nc <- NbClust(brewery_numeric4[c(3:5)], min.nc=2, max.nc=20, method="kmeans")
View(brewery_3comp)
#validation_1
nc <- NbClust(brewery_scale, min.nc=2, max.nc=20, method="kmeans")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
#scaling
brewery_scale<-scale(brewery_3comp[,c(2:4)],center=TRUE,scale=TRUE)
summary(brewery_scale)
#validation_1
nc <- NbClust(brewery_scale, min.nc=2, max.nc=20, method="kmeans")
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
par(mfrow=c(1,1))
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen")
wssplot <- function(data, nc=20, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(brewery_scale)
#cluster
clusters_out <- kmeans(x = brewery_scale, centers = 19)
cluster_b19<-cbind(cluster_assignment=factor(clusters_out$cluster),brewery_3comp)
qplot(IBU, ABV, colour = cluster_assignment, data = cluster_c19)
qplot(IBU, ABV, colour = cluster_assignment, data = cluster_b19)
View(cluster_b19)
